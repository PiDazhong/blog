(window.webpackJsonp=window.webpackJsonp||[]).push([[132],{543:function(t,e,r){"use strict";r.r(e);var s=r(44),a=Object(s.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h2",{attrs:{id:"props和-emit"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#props和-emit"}},[t._v("#")]),t._v(" props和$emit")]),t._v(" "),r("ul",[r("li",[t._v("父组件向子组件传递数据是通过prop传递的")]),t._v(" "),r("li",[t._v("子组件传递数据给父组件是通过$emit触发事件来做到的。")])]),t._v(" "),r("h2",{attrs:{id:"attrs和-listeners"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#attrs和-listeners"}},[t._v("#")]),t._v(" $attrs和$listeners")]),t._v(" "),r("ul",[r("li",[t._v("能实现祖孙组件通信")])]),t._v(" "),r("h2",{attrs:{id:"中央事件总线eventbus-emit-on"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#中央事件总线eventbus-emit-on"}},[t._v("#")]),t._v(" 中央事件总线eventBus  $emit $on")]),t._v(" "),r("p",[t._v("上面两种方式处理的都是父子组件之间的数据传递，而如果两个组件不是父子关系呢？"),r("br"),t._v("\n这种情况下可以使用中央事件总线的方式。")]),t._v(" "),r("ul",[r("li",[t._v("新建一个空的Vue事件bus对象，然后通过bus.$emit触发事件，bus.$on监听触发的事件")])]),t._v(" "),r("h2",{attrs:{id:"provide和inject"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#provide和inject"}},[t._v("#")]),t._v(" provide和inject")]),t._v(" "),r("ul",[r("li",[t._v("父组件中通过provider来提供变量，然后在子组件中通过inject来注入变量。"),r("br"),t._v("\n不论子组件有多深，只要调用了inject那么就可以注入provider中的数据。"),r("br"),t._v("\n而不是局限于只能从当前父组件的prop属性来获取数据，只要在父组件的生命周期内，子组件都可以调用")])]),t._v(" "),r("h2",{attrs:{id:"parent-和-children-与-ref"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#parent-和-children-与-ref"}},[t._v("#")]),t._v(" $parent 和 $children 与 ref")]),t._v(" "),r("ul",[r("li",[t._v("直接得到组件实例，无法在跨级或兄弟间通信")])]),t._v(" "),r("h2",{attrs:{id:"_6、vuex"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_6、vuex"}},[t._v("#")]),t._v(" 6、vuex")]),t._v(" "),r("ul",[r("li",[t._v("vuex处理组件之间的数据交互")])])])}),[],!1,null,null,null);e.default=a.exports}}]);