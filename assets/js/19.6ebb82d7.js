(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{424:function(l,a,n){"use strict";n.r(a);var t=n(44),e=Object(t.a)({},(function(){var l=this,a=l.$createElement,n=l._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":l.$parent.slotKey}},[n("h4",{attrs:{id:"_1-happypack-plugin"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-happypack-plugin"}},[l._v("#")]),l._v(" 1.HappyPack Plugin")]),l._v(" "),n("p",[l._v("会创建多个子进程来并行构建，loader加载缓慢的时候使用，其他情况下\n反而会因为 创建和管理子进程会带来额外的性能损耗")]),l._v(" "),n("h4",{attrs:{id:"_2-dllplugin"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-dllplugin"}},[l._v("#")]),l._v(" 2.DllPlugin")]),l._v(" "),n("p",[l._v("将第三方资源提前打包，并且缓存（需要在正式版本构建之前单独构建一次），\n同时生成Manifest.json文件")]),l._v(" "),n("h4",{attrs:{id:"_3-dllreferenceplugin"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-dllreferenceplugin"}},[l._v("#")]),l._v(" 3.DllReferencePlugin")]),l._v(" "),n("p",[l._v("正式打包时，使用这个插件可以利用DllPlugin缓存下来的资源，提升构建速度")]),l._v(" "),n("h4",{attrs:{id:"_4-ignoreplugin"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-ignoreplugin"}},[l._v("#")]),l._v(" 4.IgnorePlugin")]),l._v(" "),n("p",[l._v("忽略各种无关文件，提升loader速度")]),l._v(" "),n("h4",{attrs:{id:"_5-paralleluglifyplugin"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-paralleluglifyplugin"}},[l._v("#")]),l._v(" 5.ParallelUglifyPlugin")]),l._v(" "),n("p",[l._v("Parallel是并行的意思，UglifyPlugin是代码丑化插件")]),l._v(" "),n("h4",{attrs:{id:"_6-commonschunkplugin-splitchunksplugin"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-commonschunkplugin-splitchunksplugin"}},[l._v("#")]),l._v(" 6. CommonsChunkPlugin / SplitChunksPlugin")]),l._v(" "),n("p",[l._v("通过将公共模板拆出来，最终合成的文件在最开始的时候加载一次，便存到缓存中\n供后续使用。这个带来速度上的提升，因为浏览器会迅速将公共的代码从缓存中取出来\n，而不是每次访问一个新页面时，再去加载一个更大的文件。")])])}),[],!1,null,null,null);a.default=e.exports}}]);